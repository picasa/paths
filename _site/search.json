[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I‚Äôm a scientist working for the French National Institute of Agricultural Research (INRAE). I use computational and modelling approaches to understand how crops interact with their environments. I am exploring how community ecology principles and crop modeling can help to understand less controlled and more species-varied cropping systems. You can find additional information on my work and publications on my ORCID and scholar pages.\n\n\n\nI try to use my data science skills to create algorithmic art. I published these works on this website, with some posts in mastodon. You can also find some examples along with the tools i used for creative coding here."
  },
  {
    "objectID": "about.html#hi-im-pierre",
    "href": "about.html#hi-im-pierre",
    "title": "About",
    "section": "",
    "text": "I‚Äôm a scientist working for the French National Institute of Agricultural Research (INRAE). I use computational and modelling approaches to understand how crops interact with their environments. I am exploring how community ecology principles and crop modeling can help to understand less controlled and more species-varied cropping systems. You can find additional information on my work and publications on my ORCID and scholar pages.\n\n\n\nI try to use my data science skills to create algorithmic art. I published these works on this website, with some posts in mastodon. You can also find some examples along with the tools i used for creative coding here."
  },
  {
    "objectID": "posts/process/dispyr/index.html",
    "href": "posts/process/dispyr/index.html",
    "title": "Dispyr",
    "section": "",
    "text": "This work is an attempt to emulate etching drawings with code, by playing with noise and data removal to create a natural rendering of random fragments of the Pyr√©n√©es.\nê´±"
  },
  {
    "objectID": "posts/process/dispyr/index.html#inspiration-and-aims",
    "href": "posts/process/dispyr/index.html#inspiration-and-aims",
    "title": "Dispyr",
    "section": "Inspiration and aims",
    "text": "Inspiration and aims\nI was searching for an hybrid between the simplicity and efficiency of a famous data visualization in astronomy and the Meridian series by Matt Deslauriers. Moreover, to be able to use a pen-plotter to trace the images on paper, the algorithm should produce relatively long lines rather than the myriad of short segments that make Meridian appealing.\n \n\nleft : ‚ÄúSuccessive pulses from the first pulsar discovered, CP 1919, are here superimposed vertically. The pulses occur every 1.337 seconds. They are caused by rapidly spinning neutron star.‚Äù From The Cambridge Encyclopaedia of Astronomy.right : Meridian #638\n\nThis algorithm feeds on elevation data produced by public structures with different technologies (image analysis, topographical radar, or lidar) and made available for reuse. In this sense, it differs from generative art, where the code is self-sufficient to produce results (see why-love-generative-art) This short article explains the underlying logic and software code. A basic reproducible example is available here to encourage creative experiments.\nI won‚Äôt comment much on the choice of the R language and the code itself. It‚Äôs just that I knew this language for work, and I was curious to see if i could reuse it for other projects. For me, the functional programming paradigm makes sense to interact with code, moreover when working in interrupted streaks. The broad data exploration workflow resonate with my somewhat reductionist creative approach, especially how the tools for data visualization enable to focus on visual experiments rather code for graphics. I also went for the easy way, thanks to the creators of incredible libraries for (spatial) data processing and graphics. For this project I used {{stars}}, {{dplyr}}, and {{ggplot2}}.\nThe algorithm is composed by three main functions, created to be used successively (with the R pipe function, |&gt;). This article broadly illustrates the content of these functions.\n\nCodeget_features_ridge(seed = 15) |&gt; gen_dispyr(n_ridges = 800) |&gt; plot_ridge()\n\n\n\n\nget_features_ridge() is a function of a random seed, and is used to generate the main features of the output (e.g.¬†the location, orientation, style)\n\ngen_dispyr() uses this set of features to download and process data from a digital elevation model (3D) into a set of lines (2D).\n\nplot_ridge() renders the processed data into a vector image."
  },
  {
    "objectID": "posts/process/dispyr/index.html#process",
    "href": "posts/process/dispyr/index.html#process",
    "title": "Dispyr",
    "section": "Process",
    "text": "Process\nFeatures generation\nThe outputs have only two broad features: a random location in the Pyr√©n√©es mountain range and a rendering style, randomly chosen among four methods with a set of probabilities. Most of the visual variability in the outputs is driven by the choice of geographical location, it gives the series a strong link with the subject, but somehow limits the maximum number of obtainable iterations.\nLocation\nTo get a random location in the Pyr√©n√©es mountain range, we first define a sampling region (a 20 km wide buffer around the French-Spain border), and use sf::st_sample to sample a location in this polygon. The code is simplified to sample a mysterious location in a polygon defined by the Andorra borders.\n\nCode# load a polygon of the Andorra borders\npolygon &lt;- rnaturalearth::ne_countries(\n  country = c(\"andorra\"), scale = \"medium\", returnclass = \"sf\"\n  ) |&gt; st_transform(2154)\n\n# get a sample in the defined polygon \ncoord &lt;- st_sample(polygon, size = 1) |&gt; st_as_sf()\n\n\n\n\n\n\n\n\n\n\n\n\nRendering style\nThe overall rendering style is impacted by a dozen parameters in the code (e.g.¬†line density, position of lines in the y-axis, amount and position of removed data). Rather than a free exploration of this parameter space, which could lead to heterogeneous outputs, I defined a limited number of fixed sets of parameters. I created four styles, and named them as weather conditions (clear, mist, snow, storm).\nTechnically nothing complicated, the get_features_ridge() function returns a list of features and associated parameters, later used for the data processing step. The parameters are presented at the moment they are used in the code.\nData processing\nThis stage uses the previous set of features to download and process data from a digital elevation model (3D) into a set of lines (2D), with distinct processing steps.\nGetting a realistic description of the landscape\nThis step start by actually retrieving the elevation data around the sampled location (a 2x2 km square for the illustration, 20x15 km normally). The {{elevatr}} R package makes this step a breeze, but the process is the same when using local high-resolution data.\n\nCode# get DEM data in a 2x2 km region around the sampled point\ndem &lt;- elevatr::get_elev_raster(\n  coord, z = 11, expand = 1E3, clip = \"bbox\") \n\n# use a heatmap to glance at elevation data\nplot &lt;- ggplot() +\n  geom_stars(data = st_as_stars(dem)) +\n  geom_sf(data = coord, color = \"white\", size = 1) +\n  scale_fill_viridis_c(name = \"elevation\") +\n  labs(x = \"lon\", y = \"lat\") \n\n\n\n\n\n\n\n\n\n\n\n\nSlicing the landscape into lines\nThe aim is to process a 3D point set into 2D lines, by computing multiple lines of elevation as a function of longitude, for discrete latitude values. This step is perfectly illustrated by the stacked plot of radio signals presented previously. In our case, each line corresponds to one row in the elevation data (74x74 matrix in the example). Without further modifications, the output is unclear, with a lot of intersecting lines (figure A).\nTo improve the output readability, but also introduce potential for variations, we process this raw elevation matrix with two actions:\n\nshift lines in the y-direction as a function of their rank from the foreground.\ndelete the line segments that should be hidden by foreground lines with a higher elevation.\n\n\nCode# parameters\nz_shift = 5\n\n# convert DEM from spatial to dataframe format\ndf_dem &lt;- dem |&gt; stars::st_as_stars() |&gt;\n  as_tibble() |&gt; select(x, y, z = 3)  \n\n# compute elevation shift as a function of normalized distance\ndata_index &lt;- df_dem |&gt;\n  distinct(y) |&gt; arrange(y) |&gt;\n  mutate(\n    y_rank = rank(y),\n    y_dist = scales::rescale(y, to = c(0,1)),\n  ) |&gt;\n  mutate(dz = y_rank * z_shift)\n\n# compute shifted elevation values\ndf_shift &lt;- df_dem |&gt; \n  left_join(data_index, by = \"y\") |&gt;\n  group_by(y) |&gt; mutate(xn = x - min(x), x_rank = rank(x)) |&gt; ungroup() |&gt;\n  mutate(zs = z + dz)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe shifting step calculates the difference from the reference elevation as a linear function of its rank from the foreground (figure B). Increasing the slope of this function impacts the perspective, towards a more aerial view of the landscape, eventually reducing the number of intersecting lines (figure C). Using non-linear functions creates unrealistic but interesting perspectives.\nAt this step, a fast solution to achieve line intersection is by drawing lines with a filled area underneath, starting from the background and thus progressively masking previous polygons (as in painter‚Äôs algorithm). This solution is implemented directly in the ggridges R package. But this option is not ideal for creative coding : the hidden lines still exist, which makes vector outputs unusable with a pen-plotter, and it lacks flexibility on the overlaying method.\n\nCode# parameters\nn_lag = 100\nz_threshold = 0\n\n# define window functions for multiple lag positions\nlist_distance &lt;- map(glue::glue(\"~ . - lag(., n = {1:n_lag})\"), ~ as.formula(.))\nlist_col &lt;- glue::glue(\"zs_{1:n_lag}\")\n\n# remove points hidden by foreground ridges :\n# compute lagged elevation difference between successive y for each x \n# replace value by NA when the difference is less than a threshold \ndf_ridge &lt;- df_shift |&gt; \n  arrange(y_rank) |&gt; group_by(x) |&gt;\n  mutate(across(zs, .fns = list_distance)) |&gt;\n  ungroup() |&gt; \n  mutate(\n    zn = case_when(\n      if_any(all_of(list_col), ~ . &lt; z_threshold) ~ NA_real_,\n      TRUE ~ zs)) |&gt;\n  select(- all_of(list_col))\n\n\nIn the code above, the intersections between lines are avoided by checking for a minimum distance between a point at a given x position and its neighbourhood along y, and removing the point if any points in the neighbourhood falls below this distance (z_threshold parameter). To avoid computing the distance matrix for all points (744, in this small area), we only check for intersections along a limited range (n_lag parameter, between 0 and 300 y ranks). Increasing the threshold parameter creates clearer distinction between the sides of mountains.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLine segments are hidden by foreground lines by using polygon masking (left) or distance-based point removal with a null (center) or positive threshold (right).\n\n\n\nEffect of shift (in rows) and threshold (in columns) parameter combination on the landscape rendering (16 km2).\n\nAltering the lines with noise and deletion\nFinally, the overall aesthetic is obtained by adding noise and discarding data as a function of various attributes (elevation, slope, elevation dispersion). The governing idea was to test how our perception of the landscape changes when most of the initial topographical data is perturbed or removed. Here are four methods, but much is left to explore. The illustration code here is functioning without external call, but highly redundant and surely not optimal, you can conveniently hide it if you feel horrified.\n\n\nFour data processing methods, all based on filtering points and adding noise, and named after weather conditions (clear, mist, snow, storm).\n\nclear\nFor each ridgeline, the method samples 50 % of the points and adds moderate jitter on elevation values.\n\nCode# parameters\nz_remove = 0.5      # proportion of points to remove\nz_jitter = 4        # amount of jitter in elevation values\n\n# randomly sample a proportion of points in a line, jitter their y-position.\ndf_plot &lt;- df_ridge |&gt;\n  group_by(y_rank) |&gt;\n  slice_sample(prop = (1 - z_remove)) |&gt;\n  mutate(zn = jitter(zn, amount = z_jitter))\n\n# plot output\ndf_plot |&gt; ggplot(aes(x, zn, group = y)) +\n  geom_line(alpha = 0.5) + coord_fixed() + theme_void() \n\n\n\n\n\n\n\nmist\nSame base as the previous method. In addition, when below an elevation threshold, lines are smoothed and points are randomly removed.\n\nCode# functions\n\n# add a proportion of missing values in a vector\nsample_missing &lt;- function(x, p) {\n  n &lt;- length(x)\n  s &lt;- sample(1:n, size = p * n)\n  x[s] &lt;- NA\n  return(x)\n}\n\n# parameters\nx_size = 10         # window of the rolling average \nz_limit = 0.5       # quantile value determining the elevation threshold\nz_remove = 0.5      # proportion of points to remove in lines\nz_missing = 0.2     # proportion of missing value to add\nz_jitter = 4        # amount of jitter in elevation values\n\n# calculate elevation cut\nz_cut = quantile(df_ridge$z, z_limit, na.rm = TRUE)\n\n# smooth lines with a rolling mean \ndf_smooth &lt;- df_ridge |&gt;\n  group_by(y_rank) |&gt;\n  mutate(\n    zm = RcppRoll::roll_mean(zn, n = x_size, fill = NA),\n    zm = case_when(\n      (is.na(zm) & (x_rank &lt; x_size/2 | x_rank &gt; max(x_rank) - x_size/2)) ~ zn,\n      TRUE ~ zm)) \n\n# remove data as a function of elevation, jitter y-position above a threshold   \ndf_plot &lt;- df_smooth |&gt; \n  slice_sample(prop = (1 - z_remove)) |&gt;\n  mutate(\n    zn = case_when(\n      (z &lt; (z_cut - 200)) ~ sample_missing(zm, p = z_missing + 0.2),\n      (z &lt; z_cut)         ~ sample_missing(zm, p = z_missing),\n      TRUE                ~ zn),\n    zn = if_else(z &gt; z_cut, jitter(zn, amount = z_jitter), zn)\n  ) \n\n# plot output\ndf_plot |&gt; ggplot(aes(x, zn, group = y)) +\n  geom_line(alpha = 0.5) + coord_fixed() + theme_void() \n\n\n\n\n\n\n\nsnow\nSame base as the previous method, but the data removal is also a function of a slope threshold.\n\nCode# parameters\nx_size = 5          # window of the rolling average \nz_limit = 0.7       # quantile value determining the elevation threshold\nz_remove = 0.5      # proportion of points to remove in lines\nz_missing = 0.6     # proportion of missing value to add\nz_jitter = 4        # amount of jitter in elevation values\n\n# calculate elevation cut\nz_cut = quantile(df_ridge$z, z_limit, na.rm = TRUE)\n\n# calculate local slope and remove points for flat areas\ndf_filter &lt;- df_ridge |&gt;\n    group_by(y_rank) |&gt; arrange(x_rank) |&gt;\n    mutate(\n      z_slope = abs(\n        (zn - lag(zn, default = 0)) / (xn - lag(xn, default = 0))\n        ),\n      z_slope = RcppRoll::roll_mean(z_slope, n = x_size, fill = NA_real_),\n      zn = if_else(z_slope == 0, NA_real_, zn)\n    ) |&gt; ungroup()\n\n# remove data as a function of slope and elevation   \ndf_plot &lt;- df_filter |&gt;\n  group_by(y_rank) |&gt;\n  slice_sample(prop = (1 - z_remove)) |&gt;\n  mutate(\n    zn = case_when(\n      (z &gt; z_cut) & (z_slope &lt; 60/100)         ~\n        sample_missing(zn, p = z_missing),\n      (z &gt; (z_cut - 100)) & (z_slope &lt; 60/100) ~\n        sample_missing(zn, p = z_missing / 2),\n      TRUE                                     ~\n        zn),\n    zn = jitter(zn, amount = z_jitter)\n  ) \n\n# plot output\ndf_plot |&gt; ggplot(aes(x, zn, group = y)) +\n  geom_line(alpha = 0.5) + coord_fixed() + theme_void() \n\n\n\n\n\n\n\nstorm\nWhole strips of lines are removed when the elevation variation is below a threshold. Additionally, an important jitter is added as a function of local slope value.\n\nCode# functions\n\n# scale the input vector with an exponential function\nf_exp &lt;- function(x, k = 1, a = 1, b = 0, scale = FALSE) {\n  if (scale == TRUE) x = scales::rescale(x, to=c(0,1)) else x\n  a * exp(k * x) + b\n}\n\n# find multiple non-consecutive minima in a vector (this is awful) \nget_extremum &lt;- function(data, n = 5, w = 20, delta = 20, method = \"max\") {\n  data |&gt;\n    mutate(\n      y_smooth = RcppRoll::roll_mean(y_raw, n = w, na.rm = TRUE, fill = NA)\n    ) |&gt;\n    filter((y_smooth - y_raw) &gt; delta) |&gt;\n    filter(\n      if_else(\n        lag(y_raw, n = 1) &gt; y_raw & lead(y_raw, n = 1) &gt; y_raw,\n        TRUE, FALSE)\n    ) |&gt;\n    slice_min(y_raw, n = n)\n}\n\n# parameters\ny_range = 5        # number of ridges to remove around selected ones\nx_size = 5          # window of the rolling average \nz_remove = 0.5      # proportion of points to remove in lines\nz_jitter = 4        # amount of jitter in elevation values\n\n\n# get maximum number of ridgelines\nn_ridge_max &lt;- df_ridge |&gt; distinct(y_rank) |&gt; nrow()\n\n# calculate local slope and remove points for flat areas\ndf_filter &lt;- df_ridge |&gt;\n    group_by(y_rank) |&gt; arrange(x_rank) |&gt;\n    mutate(\n      z_slope = abs(\n        (zn - lag(zn, default = 0)) / (xn - lag(xn, default = 0))\n        ),\n      z_slope = RcppRoll::roll_mean(z_slope, n = x_size, fill = NA_real_),\n      zn = if_else(z_slope == 0, NA_real_, zn)\n    ) |&gt; ungroup()\n\n# compute potential distortion on z-axis as a function of local slope on x-axis\n# jitter by sampling in this distortion level for each point\ndf_sample &lt;- df_filter |&gt;\n  group_by(y_rank) |&gt;\n  slice_sample(prop = (1 - z_remove)) |&gt;\n  mutate(z_jitter = f_exp(z_slope, k = 3.5, a = 0.3, scale = TRUE) * z_jitter) |&gt;\n  ungroup() |&gt;\n  mutate(\n    z_jitter = runif(n(), -z_jitter, z_jitter),\n    zn = zn + z_jitter\n  )\n\n# get ridges position with low elevation variance\nindex_strip &lt;- df_sample |&gt;\n  group_by(y_rank) |&gt;\n  summarise(y_raw = sd(z, na.rm = TRUE)) |&gt;\n  get_extremum(n = as.integer(z_remove * 5), w = 30, delta = 3, method = \"min\") |&gt;\n  filter(between(y_rank, (y_range + 5), (n_ridge_max - y_range - 5)))\n\n# remove strips of ridges based on previous index\ndf_plot &lt;- anti_join(\n  df_sample,\n  df_sample |&gt;\n    distinct(y_rank) |&gt;\n    slice(\n      index_strip |&gt; pull(y_rank) |&gt;\n        map(~ (.x - y_range):(.x + y_range)) |&gt;\n        flatten_int()\n    ),\n  by = \"y_rank\"\n)\n\n# plot output\ndf_plot |&gt; ggplot(aes(x, zn, group = y)) +\n  geom_line(alpha = 0.5) + coord_fixed() + theme_void() \n\n\n\n\n\n\n\nRendering\nThis step is essentially playing on opacity (either constant or variable along a line) and on the doubling of the line strokes to emulate pencil lines. Thanks to the R graphical devices, the same object can be exported to bitmap or vector files.\ndefault\n\nCode# parameters\nz_remove = 0.5      # proportion of points to remove\nz_jitter = 4        # amount of jitter in elevation values\np_alpha = 0.5       # mean opacity value\n\n# randomly sample a proportion of points in a line, jitter their y-position.\ndf_plot &lt;- df_ridge |&gt;\n  group_by(y_rank) |&gt;\n  slice_sample(prop = (1 - z_remove)) |&gt;\n  mutate(zn = jitter(zn, amount = z_jitter))\n\n# render lines with a constant alpha value\ndf_plot |&gt; ggplot(aes(x, zn, group = y)) +\n  geom_line(alpha = p_alpha) + coord_fixed() + theme_void() \n\n\n\n\n\n\n\nvariable opacity\n\nCode# parameters\np_alpha_sd = 0.10   # dispersion of opacity value \n\n# render line with an alpha value sampled from a Gaussian distribution\ndf_plot |&gt;\n  mutate(z_alpha = rnorm(n(), p_alpha, p_alpha_sd)) |&gt; \n  ggplot(aes(x, zn)) +\n  geom_line(aes(group = y_rank, alpha = z_alpha)) +\n  scale_alpha_identity() + coord_fixed() + theme_void() \n\n\n\n\n\n\n\nvariable opacity and double strokes\n\nCode# functions\n# fit a polynomial determined by one or more numerical predictors\nf_loess &lt;- function(data, span, n = 10) {\n\n  # do not fit model if less than n non-na values\n  if (sum(!is.na(data$zn)) &lt; n) {\n\n    return(rep(NA, nrow(data)))\n\n  } else {\n\n    m &lt;- loess(zn ~ xn, data = data, na.action = na.exclude, span = span)\n    return(predict(m))\n\n  }\n}\n\n# parameters\np_span = 0.5      # span of the smoothing model (smaller fits the line)\np_length = 25     # minimal line length to apply the smoothing model\n\n# render line with two strokes, and variable alpha\ndf_smooth &lt;- df_plot |&gt;\n  group_by(y_rank) |&gt; nest() |&gt;\n  mutate(z_smooth = map(data, ~ f_loess(., span = p_span, n = p_length))) |&gt;\n  unnest(c(data, z_smooth))\n\nggplot() +\n  geom_line(\n    data = df_plot |&gt; mutate(z_alpha = rnorm(n(), p_alpha, p_alpha_sd)),\n    aes(xn, zn, group = y_rank, alpha = z_alpha), na.rm = TRUE) +\n  geom_line(\n    data = df_smooth,\n    aes(xn, z_smooth, group = y_rank), alpha = p_alpha) +\n  scale_alpha_identity() + coord_fixed() + theme_void()"
  },
  {
    "objectID": "posts/process/dispyr/index.html#iterations",
    "href": "posts/process/dispyr/index.html#iterations",
    "title": "Dispyr",
    "section": "Iterations",
    "text": "Iterations\nThese outputs were generated with the algorithm described previously, but based on a random location in the whole Pyrenees range (with a larger geographical area - 15x20 km, and a random cardinal orientation), and a random aesthetic style among the four presented ones. The algorithm can handle about 1000 iterations before repeating information (about 70 distinct 300 km2 regions with limited overlapping, 4 orientations, and 4 styles).\n\nAn example of 32 random iterations from this algorithm."
  },
  {
    "objectID": "posts/works/published/index.html",
    "href": "posts/works/published/index.html",
    "title": "Published",
    "section": "",
    "text": "2024-02, Ridge Regression, Online exhibition, 128 digital and physical works\nThis was my first attempt at a relatively long series of code generated works (long-form), built on my previous works on data-based landscape. By focusing on an evolutionary process applied to geology, it generates a variety of landscape elements that are then selected and recombined to create new landforms. This work is documented in a more in-depth article, along with the full 128 iterations.\nThese series was developed and curated in collaboration with the Tender art gallery and released as NFT on the verse platform.\n\ndigital, computed and rendered with R, bitmap, scanned from the paper works. Published as NFTs on the verse platform (link).\nink on paper, plotted with Axidraw V3/A3 on 220 g/m2 paper (148x210 mm, A5) with various pens.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2023-01, Dispyr, Collective exhibition, 8 digital and physical works\nIn this collection of eight landscape representations, i used real elevation data produced by various public institutes to create digital representations of the Pyr√©n√©es mountain range. I selected pieces moving from realism to abstraction while staying in the landscape figurative style, a way to acknowledge mountains as scientific and mystic places.\nTheses works were selected and presented during a collective exhibition (Odysseys), curated by the verse platform, in January 2023, at Cromwell Place, London.\n\ndigital, lossless bitmap, computed and rendered with R. Published as NFTs on the verse platform (link.\nink on paper, plotted with Axidraw V3/A3 on 220 g/m2 paper (various format) with Rotring Isograph pens, Pentel FL2B brush pen, Pilot Parallel pen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022-09, Conflated Conflent, Collective exhibition, 1 digital work\nOne work playing on the data-to-ink ratio idea from data visualisation, a quick way to say that you should avoid using too much ink if it does not represent information. In this case, a bit less than 2 percent of the initial topographical information is represented in this landscape. This work (Conflated Conflent) was selected for an online collective exhibition (Arithmetic Phenomena).\n\ndigital, 2338 x 3307 lossless bitmap, computed and rendered with R. Published as NFTs on the verse platform (link).\n\n\n\n\n\n2022-09, Dispyr studies, 4 digital works\nAn attempt to emulate etching aesthetics with code, methodically removing more and more information.\n\ndigital, lossless bitmap, computed and rendered with R. Published as NFTs on the objkt platform (link).\n\n\n\n\n\n\n\n2022-07, Ridge planting, 4 digital and physical works\nCollaboration with Anthony Siracusa. This short series is an attempt to gradually move from code-generated to hand-drawn works. In a first step we generated about a hundred simple landscapes, using geographical data from the Alps mountain range. We then selected a dozen outputs, traced them using a pen-plotter, made a final selection and finally drawn plant shapes between the ridges.\n\ndigital, 4960 x 3507 lossless bitmap, computed and rendered with R. Published as NFTs on the teia platform (link).\nink on paper (210 x 297 mm, A4), hand and machine-drawn, landscape digitally rendered.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022-07, Dispyr Views, 8 digital and physical works\nSelected fragments of the Pyr√©n√©es mountain range, based on real-world data from a digital elevation model (15x10 km region). The overall aesthetic is obtained by adding noise and discarding data as a function of a distance matrix.\n\ndigital, 4960 x 3507 lossless bitmap, computed and rendered with R. Published as NFTs on the objkt platform (link).\nink on paper, plotted with Axidraw V3/A3 on 300 g/m2 paper (298x420 mm, A3) with Rotring Isograph 0.3mm pen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022-01, Dispyr, 16 digital and physical works\nA series of 16 curated iterations representing random fragments of the Pyr√©n√©es mountain range, based on real-world data from a digital elevation model. The overall aesthetic is obtained by adding noise and discarding data as a function of various attributes (elevation, slope, elevation dispersion). About 90 % of the information present in the initial dataset is discarded, using four methods. This work is documented in a more in depth article.\n\ndigital, 2330 x 3307 lossless bitmap, computed and rendered with R. Published as NFTs on the objkt platform (link).\nink on paper, plotted with Axidraw V3/A3 on 220 g/m2 paper (148x210 mm, A5) with Rotring Isograph 0.3mm pen."
  },
  {
    "objectID": "posts/research/attractors/index.html",
    "href": "posts/research/attractors/index.html",
    "title": "Attractors",
    "section": "",
    "text": "Aesthetic point sets generated by discrete dynamical systems.\n\nThis work explores the capacity of discrete dynamical systems to generate a large diversity of point sets. It is based on this paper from J.C Sprott in 1993, recently reproduced by Paul Bourke. Henrik Lindberg also published an R implementation of the quadratic map functions used here.\nThe algorithm is based on a system of difference equations, with 12 parameters. The first step is to sample the parameter space by using a discrete scale of 26 values for each parameter so that each sample can be assigned a ‚Äúname‚Äù with 12 letters. A second step discards failed solutions (convergence to a point, divergence) and filters the aesthetic ones, based on a set of criteria (Lyapunov exponent, summary of point density distribution, correlation). Overall, very few solutions are selected (~ 0.1 %).\nWhile this method is a very good generator for diverse 2D shapes, it is not compatible with pen-plotting because of the difficulty to create paths from those point sets - the points are not ordered by the iterations of the difference equation, and jumps from one position to another. One solution is to define the relative neighbourhood graph on a subsample of the simulated set of points."
  },
  {
    "objectID": "posts/research/ridges/index.html",
    "href": "posts/research/ridges/index.html",
    "title": "Ridges",
    "section": "",
    "text": "Distinct and shifted lines visualized from digital elevation model datasets.\n\nThe central idea is to convert 3D point sets to 2D lines. Digital Elevation Model (DEM) represents elevation as a function of latitude and longitude. In France, the national geographic institute makes this DEM available in Open-Data (RGE, up to a 1m resolution). These illustrations are made of multiple lines of elevation as a function of longitude, for discrete latitude values. Overplotting is avoided (hidden lines) by checking for a minimal distance between two lines. Variation comes from the scale and location of the geographical region and from the parameterization of the line clipping method.\nAdding noise or removing information from the original DEM data seems to create a more natural rendering. This option was explored in the dispyr series"
  },
  {
    "objectID": "posts/research/asemic/index.html",
    "href": "posts/research/asemic/index.html",
    "title": "Asemic",
    "section": "",
    "text": "Asemic characters and words generated with splines controlled by random control-points.\n\nThis system was developed after reading Anders Hoff works on asemic writing. In his algorithm, individual shapes (glyphs) are generated with splines defined by few control points sampled from a 2D space (square, ellipse), and glyphs are concatenated together to create cursive-like writing.\nHere, to produce words or paragraphs with sensible text-like aesthetics, I limited the number of generated glyphs and mapped them to a fixed set of characters: the represented glyph sequence is a function of a generated text (e.g.¬†Lorem ipsum).\nVariation can be obtained by acting on the glyph aggregation method. If the glyphs are drawn independently from each other, the algorithm emulates script writing. More detailed symbols can be obtained by concatenating a few glyphs (2-4) before mapping them to characters. Increasing the number of spline control points also produces refined shapes, but quickly becomes too complex. The examples below are using two random seeds: one for the character set, and one for the text sequence used as layout."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Paths | Pierre Casadebaig",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (‚ÄúCreative Commons‚Äù) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an ‚Äúas-is‚Äù basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public: \nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (‚ÄúPublic License‚Äù). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 ‚Äì Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter‚Äôs License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 ‚Äì Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor ‚Äì Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 ‚Äì License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter‚Äôs License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 ‚Äì Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 ‚Äì Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 ‚Äì Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 ‚Äì Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 ‚Äì Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the ‚ÄúLicensor.‚Äù The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark ‚ÄúCreative Commons‚Äù or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "posts/research/cells/index.html",
    "href": "posts/research/cells/index.html",
    "title": "Cells",
    "section": "",
    "text": "Cellular-like features generated from tessellation of point sets.\n\nThis algorithm first generates a point set, using either a deterministic (ODE) or stochastic method. Then, a space tessellation method is used on a subset of the original point set. This method is used for different features loosely inspired by cellular biology (e.g.¬†cells, tissues, vessels), that are assembled as different layers.\nThe aim was to search for a balance between the algorithm capacity to generate various outputs (but needing a curation step) and its capacity to produce aesthetic but overly similar outputs (narrow parameterization). This solution also explored the variability generated by sampling the same initial point set at different scales and locations. This last idea was adapted to the sampling of various topographical locations in the dispyr series."
  },
  {
    "objectID": "posts/research/collatz/index.html",
    "href": "posts/research/collatz/index.html",
    "title": "Collatz",
    "section": "",
    "text": "Curves parameterized from integer sequences and positioned according to basic botanical rules.\n\nThis system focuses on a very simple generator, here a sequence of numbers generated from a set of rules. In this case, I used the Collatz sequence because it has a decreasing, random-looking pattern, which is a nice feature for plant structures (e.g.¬†the internode distribution on a stem).\nThis sequence is used to define a curve, by mapping sequence elements to segment length, with a random angle between segments. Multiple curves are computed to constitute a node, and multiple nodes to constitute a stem / individual. Further recursion can be used to create populations of multiple individuals, with random or community-dependent features.\nThe main random elements are the initial value of the sequence, and the angle distribution between curve segments.\nI explained this approach a bit more in details during a talk at an art show, slides are available here.\nOn this series, rather than properly computing hidden line or polygons, I used an external algorithm (bitmap tracing) which had the nice side-effect of reshaping and merging some paths."
  },
  {
    "objectID": "posts/works/portfolio/index.html",
    "href": "posts/works/portfolio/index.html",
    "title": "Portfolio",
    "section": "",
    "text": "A selection digital works traced on paper using a pen-plotter.\n\nA pen plotter works much like a human hand holding a pen or pencil. It is a two dimensional robotic arm with pen-holder, and this arm moves across the paper to draw lines - I‚Äôm using an AxiDraw model (A3/V3). The plotter receives instructions from a computer that drives the precise movements of the arm. These instructions (vector files) are the results produced by running a hopefully creative code.\nAs if exploring the space defined by various parameters in the coding part was not enough, much is left to explore in the plotting process. In these few work, I merely tested different paper textures and colors, different pens (technical, felt, brush) and paint mediums (ink, acrylic)."
  },
  {
    "objectID": "posts/process/ridge/index.html",
    "href": "posts/process/ridge/index.html",
    "title": "Ridge Regression",
    "section": "",
    "text": "Ridge Regression is a series of imagined landscapes inspired by data visualization. It draws upon real elevation data to reveal the topography of France‚Äôs diverse mountain ranges. Mimicking an evolutionary process applied to geology, it generates a variety of landscape elements that are selected and recombined to create new landforms.\nê´±"
  },
  {
    "objectID": "posts/process/ridge/index.html#inspiration-and-aims",
    "href": "posts/process/ridge/index.html#inspiration-and-aims",
    "title": "Ridge Regression",
    "section": "Inspiration and aims",
    "text": "Inspiration and aims\nMy interest in methods and works that stray from mere imitation of nature led me to explore new data-based landscape representation. While the style of Alexander Cozens landscapes was aligned with his era, his method shared similar properties as algorithmic art, for example when he qualified his starting point (a blot) as a production of chance with a small degree of design.\n\n\nAlexander Cozens. Plate 2, ‚ÄúBlot‚Äù Landscapes from A New Method of Assisting the Invention in Drawing Original Compositions of Landscape, 1785\n\n\nComposing landscapes by invention, is not the art of imitating individual nature; it is more; it is forming artificial representations of landscape on the general principles of nature, founded in unity of character, which is true simplicity; concentring in each individual composition the beauties, which judicious imitation would select from those which are dispersed in nature.\n\n\n\n\n\n\n\n\n\n\n(left) The Enclosed Valley, Hercules Segers, c.¬†1625 - c.¬†1630. Line etching and drypoint, printed in brown on paper prepared with a light brown ground. (source).\n(right) Eight Views of ≈åmi - Hira Mountains, Hiroshige, 1820. Woodblock print (source)\n\nBuilding on a previous algorithm (dispyr), where each landscape was unequivocally linked to a piece of topographical data, this project explores the creation of imaginative drawings of landscapes.\nOn the digital side, this work stems from data visualization, drawing from real elevation data to reveal topography. Instead of striving for realistic renderings, the algorithm is fine-tuned to evoke hand-drawn landscapes. While certain outputs were notably distinct, most lacked a sense of place. To address this, i established rules for combining these modest outputs into cohesive, synthetic landscapes. This project also integrated various algorithmic systems‚Äîsuch as ridges, writings, and clouds‚Äîinto a generative grid layout, accommodating the form of generated components.\nOn the physical side, the project explored alternatives to precise and technical pen-plotter renderings. This was achieved through coding techniques like line overlays and noise but also by using drawing tools such as brushes, calligraphic pens, and technical pens."
  },
  {
    "objectID": "posts/process/ridge/index.html#process",
    "href": "posts/process/ridge/index.html#process",
    "title": "Ridge Regression",
    "section": "Process",
    "text": "Process\nGenerate a library of landscape elements\nThe initial step is to generate a collection of simplified landscape forms by repeatedly sampling a vast region through small ‚Äúwindows‚Äù. We base the landscape topography on observed data, rather than data generated from mathematical functions. Specifically, we focus on the variations in land height in South-West France, encoded in a digital elevation model (DEM, here IGN RGE Alti 5m, 5x5 m cells). The 3D data surrounding a given location (within a 3x3 km square) is transformed into a series of 2D lines, referred to as a landscape element. Adjustments to the dispyr algorithm, allowed for a transition from a realistic depiction of topography to more simplified forms.\n\n\nNavigating the parameter space to extract contours and forms. The top image exhibits a high level of detail, keeping the complexity and features of the real terrain. The middle image represents a shift towards abstraction while retaining recognizable elements of mountain landscapes. It simplifies details and textures, and alters the projection to create more empty space. The bottom image further abstracts the concept of mountain landscapes. This style uses minimal lines and shading to convey the idea of mountains, focusing on the silhouette and basic structure rather than detailed textures.\n\nIn each iteration, these landscape elements can depict anything from a single horizon to a series of layered ridges, depending on the data‚Äôs sampling location and orientation‚Äîtwo variables introduced at random. I have chosen to work with a simulation set of approximately 3000 elements.\n\n\nA random sample of the diversity in the population of generated landscape elements The randomness in the sampling process is the only driver of the diversity observed in these generated landscape elements.\n\nSelect contrasted building elements\nAlthough the library of simulated landscape elements contained a significant variety, some were bland, such as flat lines exhibiting minimal texture. Each element was characterized by a concise set of physical attributes, including its location, orientation, and elevation metrics (mean, deviation, range).\nInitially, the plan was to leverage these features for automatic classification into various groups through unsupervised cluster analysis. However, the resultant groups proved to be too visually heterogeneous. A manual review of the library allowed to classify each element into either a tall or flat category, based on their resemblance to mountains or plains, respectively.\nCombine elements into new landscapes\nTo craft an imaginary piece of landscape, we select a random mixture of \\(k\\) elements from the two predefined sets: 1 from the tall set (\\(n_1 = 470\\)) and \\(k-1\\) from the flat set (\\(n_2 = 480\\)). To enable landscapes with different aspect ratio, \\(k\\) was varying between 3 and 12. The combinatorics are surprising, in this case the potential number of unique combinations is incredibly large (\\(n_1\\times \\binom{n_2}{k-1} \\approx 1.6 \\times 10^{21}\\)), albeit lower when ensuring than an element could only be used once (probably above billions, not sure how to estimate this number properly).\nIntegrating multiple landscapes on a page introduced additional complexity as the construction could not be done independently. Also, to avoid too much regularity in the construction, each element was assigned a given probability to appear in the final landscape. Technically, the construction algorithm starts by dividing each element set in equal-sized groups corresponding to the number of distinct landscapes to be assembled. Then, each element is assigned a probability to be featured or not in the assembly. The sampling step operates by groups, ensuring that each assembly features different elements.\nOnce the proper building elements are selected, they are simply layered one on top of the other, starting from elements with the smaller range in the y-axis. The distance between elements also decreases as a function of their rank. While this system gives pleasing results, we can imagine much more refinement in the building process (more element types, different assembly rules).\n\n\nSampling a set of independent locations to build an imaginary landscape. We begin by selecting a random combination of landscape elements from a library. Although the selection is random, it adheres to a basic rule: a total of 3-12 elements, comprising one tall element and the remainder as flat elements. The composition of the landscape is determined by layering these elements according to their elevation range. The map on the left illustrates the geographical locations of the sampled terrain. The figure on the right depicts the resultant imaginary landscape, constructed using locations labeled in ascending order from top to bottom.\n\nDesign distinct page layouts\nWhile the created imaginative landscapes have nice aesthetics and conceptual properties, their diversity of shape is not sufficient to justify a hundred outputs. Because of their hand-drawn style, i think they were suited to be organized into a grid. With another algorithm able to generate writings and titles, it was tempting to aim for a series with graphic novel characteristics.\nEach page of the series is divided into different sections, or ‚Äúcells‚Äù, by a generative grid system. This grid system partitions the page into up to three parts, with each part being a one-sixth multiple (e.g.¬†1/6, 2/6, 3/6, for the top left page in the figure). This method is first applied on the y-axis and yields 11 partitions: 1 full page, 3 2-partitions, and 7 3-partitions. The same system is applied to individual cells in a page, enabling x-axis splits. The sampling probabilities in the partitions list were adjusted to favor a moderately fragmented layouts.\n\n\nTwelve random illustrations from the modular grid system. The page is randomly divided into up to three parts, with each part being a one-sixth multiple (e.g.¬†1/6, 2/6, 3/6, top left page). This partition is first applied on the y-axis of the page, and then on one or two applied on the x-axis\n\nWe designed four page styles using both fixed layouts and this modular grid system: two full-page landscapes (brush, cloud styles), and two grid layouts with (figure) or without legend (partition). The composition is minimal, and based on three additional elements:\n\nclouds with different density of strokes (cloud)\nglyphs that encode either the location of the geographical region (brush, one region) or the value of the random seeds (figure, n regions)\nasemic text, used as legend in the figure style.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA selection of the four defined page styles. From left to right, two full-page landscapes (brush, cloud styles), and two grid layouts with (figure) or without legend (partition). These images are vector files (they only represent paths), which is all the information needed to drive a drawing machine.\n\nDraw the digital works on paper\nIn the previous images, the shapes and composition are final, yet they lack an organic feel, such as the look of ink on paper. At this point, emulating this aesthetic with the digital images would require coding how the lines are drawn irregularly due to the pen interaction with the paper texture (feasible), or even how the ink is diffused as a function of the quantity deposited by a brush (much harder).\nThis is why i find that using a drawing machine as the final step for this project was particularly interesting. On one hand, i get to avoid thinking about the necessary level of emulation of real world materials in a digital context (skeuomorphism). On the other, the interactions with this machine caused some interesting feedback at the code level. For example, in the brush style i used functions to smooth the ridge lines because the terrain irregularities present on the raw data were not really adapted for a minimalist aesthetic. However, when the machine traced those lines, i noticed that the brush was lagging behind the machine movement, acting exactly as an analog smoother function. In response, the code was updated to a much lower level of processing for this data.\n\n\n\n\n\n\n\n\n\nFrom brush movement instructions to ink on paper. The left image is the vector file, it represents the trajectory of the brush on the paper, with the exact same pressure along the paths. The right image is a picture of the traced result on paper. Both are a cropped version from the iteration #35.\n\nAll the vector outputs from this series were traced on paper (Canson mixed media, natural white, fine grain, 200 gsm) with a different set of pens :\n\n\nbrush pen (Pentel FL2B, black ink): ridges in the brush design.\n\ncalligraphy fountain pen (Lamy Joy 1.5 mm): glyphs in the brush design (Sailor Shikiori Yodaki red ink) and in the cloud design (Pilot Iroshizuku take-sumi neutral black ink).\n\ncalligraphy pens (Pilot Parallel): hatched cloud in the cloud design (3.8 mm, Pilot Iroshizuku fuyu-syogun medium gray ink), bold writings in the figure design (1.5 mm, Pilot black ink).\n\ntechnical pens (Rotring Isograph): ridges in the cloud, figure, and grids designs (0.3 mm), frames in the figure and grids style (0.8 mm), and writings in the figure style (0.3 mm), all were drawn with the Pilot Iroshizuku take-sumi ink."
  },
  {
    "objectID": "posts/process/ridge/index.html#iterations",
    "href": "posts/process/ridge/index.html#iterations",
    "title": "Ridge Regression",
    "section": "Iterations",
    "text": "Iterations\nIn the end, we generated 256 iterations per page style and manually selected the 128 ones presented here among the series of 1024. So, none of these landscapes ever existed, and most of those which were generated were lost. At least, the ones traced on paper should have a longer existence than their digital twins."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Paths | Pierre Casadebaig",
    "section": "",
    "text": "A visual journal about algorithmic art, mainly designed for pen plotters.\n\n\n\n\n\nI‚Äôm curious how creative coding, by reducing the time between implementing changes and observing their effects, can develop intuition for making visual art.\nMy work is based on data science and visualization techniques to explore the gap between representation and abstraction, and strive to describe the essence of natural objects.\nI am using the R programming language to write algorithms that generate digital outputs. Rather than printing, I am interested in using a pen-plotter to draw them on paper. Somehow, I assume that the constraints imposed by this machine are a nice frame to the flexibility of code.\n\n\nThis site documents the ideas underlying the functioning of the algorithms, along with some digital outputs. Most of the code to study and reproduce these works is released on github .\nUnless stated otherwise, the art on this site is released under a    open license: you are free to reuse the work as long as you attribute the original to me, and derivative works must use the same license.\nI‚Äôm also learning and experimenting in my day job as a scientist  in crop ecology.\n\n\n\nê´±\n\n\n\n\n\n\n\n\n\n\n\nDrawings\n\n\n\n\n\n\n\n\n\n\n\n\n\nPublished\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nProcesses\n\n\n\n\n\n\n\n\n\n\n\nRidge Regression\n\n\n\n\n\n\n\n\n\n\n\n\n\nDispyr\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nExplorations\n\n\n\n\n\n\n\n\n\n\n\nCells\n\n\n\n\n\n\n\n\n\n\n\n\n\nCollatz\n\n\n\n\n\n\n\n\n\n\n\n\n\nRidges\n\n\n\n\n\n\n\n\n\n\n\n\n\nAsemic\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttractors\n\n\n\n\n\n\n\nNo matching items"
  }
]